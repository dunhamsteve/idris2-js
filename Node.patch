diff --git a/libs/base/Data/Either.idr b/libs/base/Data/Either.idr
index ae1f78260..19fe48975 100644
--- a/libs/base/Data/Either.idr
+++ b/libs/base/Data/Either.idr
@@ -95,9 +95,12 @@ lefts (Right _ :: xs) = lefts xs
 ||| Keep the payloads of all Right constructors in a list of Eithers
 public export
 rights : List (Either a b) -> List b
-rights []              = []
-rights (Left  _ :: xs) = rights xs
-rights (Right r :: xs) = r :: rights xs
+rights xs = go xs []
+  where
+    go : List (Either a b) -> List b -> List b
+    go [] acc = reverse acc
+    go (Left _ :: xs) acc = go xs acc
+    go (Right r :: xs) acc = go xs (r :: acc)
 
 ||| Split a list of Eithers into a list of the left elements and a list of the right elements
 public export
diff --git a/libs/base/System/Errno.idr b/libs/base/System/Errno.idr
index decddb1cd..c79864dc1 100644
--- a/libs/base/System/Errno.idr
+++ b/libs/base/System/Errno.idr
@@ -4,6 +4,7 @@ module System.Errno
 %default total
 
 %foreign "C:idris2_getErrno, libidris2_support, idris_support.h"
+         "node:support:fileErrno,support_system_file"
 prim__getErrno : PrimIO Int
 
 %foreign "C:idris2_strerror, libidris2_support, idris_support.h"
diff --git a/libs/base/System/File/Process.idr b/libs/base/System/File/Process.idr
index 83dfe3e1b..6d8d0573f 100644
--- a/libs/base/System/File/Process.idr
+++ b/libs/base/System/File/Process.idr
@@ -8,6 +8,7 @@ import System.File.Support
 import public System.File.Types
 
 %foreign "C:fflush,libc 6"
+         "node:lambda:()=>0"
 prim__flush : FilePtr -> PrimIO Int
 %foreign supportC "idris2_popen"
          supportNode "popen"
diff --git a/libs/base/System/Term.idr b/libs/base/System/Term.idr
index 0c0a50605..c055a65cc 100644
--- a/libs/base/System/Term.idr
+++ b/libs/base/System/Term.idr
@@ -6,12 +6,15 @@ libterm : String -> String
 libterm s = "C:" ++ s ++ ", libidris2_support, idris_term.h"
 
 %foreign libterm "idris2_setupTerm"
+         "node:lambda:()=>undefined"
 prim__setupTerm : PrimIO ()
 
 %foreign libterm "idris2_getTermCols"
+         "node:lambda:()=>process.stdout.columns"
 prim__getTermCols : PrimIO Int
 
 %foreign libterm "idris2_getTermLines"
+         "node:lambda:()=>process.stdout.rows"
 prim__getTermLines : PrimIO Int
 
 export
diff --git a/src/Compiler/Common.idr b/src/Compiler/Common.idr
index d51b416f0..28fcaa525 100644
--- a/src/Compiler/Common.idr
+++ b/src/Compiler/Common.idr
@@ -169,28 +169,29 @@ getAllDesc : {auto c : Ref Ctxt Defs} ->
                             -- the full definition later.
                             -- (We only need to decode the case tree IR, and
                             -- it's expensive to decode the whole thing)
-             Defs -> Core ()
-getAllDesc [] arr defs = pure ()
+             Defs -> IO (Either Error ()) -- We need to work in IO to get TCO to do its thing
+getAllDesc [] arr defs = pure $ pure ()
 getAllDesc (n@(Resolved i) :: rest) arr defs
-  = do Nothing <- coreLift $ readArray arr i
+  = do Nothing <- readArray arr i
            | Just _ => getAllDesc rest arr defs
-       case !(lookupContextEntry n (gamma defs)) of
-            Nothing => do log "compile.execute" 20 $ "Couldn't find " ++ show n
-                          getAllDesc rest arr defs
-            Just (_, entry) =>
-              do (def, bin) <- getMinimalDef entry
-                 ignore $ addDef n def
+       case !(runCore $ lookupContextEntry n (gamma defs)) of
+            Left err => pure $ Left err
+            Right Nothing => do ignore $ runCore $ log "compile.execute" 20 $ "Couldn't find " ++ show n
+                                getAllDesc rest arr defs
+            Right (Just (_, entry)) =>
+              do Right (def, bin) <- runCore $ getMinimalDef entry | Left err => pure $ Left err
+                 Right _ <- runCore $ addDef n def  | Left err => pure $ Left err
                  let refs = refersToRuntime def
                  if multiplicity def /= erased
-                    then do coreLift $ writeArray arr i (i, bin)
+                    then do writeArray arr i (i, bin)
                             let refs = refersToRuntime def
-                            refs' <- traverse toResolvedNames (keys refs)
+                            Right refs' <- runCore $ traverse toResolvedNames (keys refs) | Left err => pure $ Left err
                             getAllDesc (refs' ++ rest) arr defs
-                    else do log "compile.execute" 20
+                    else do ignore $ runCore $ log "compile.execute" 20
                                $ "Dropping " ++ show n ++ " because it's erased"
                             getAllDesc rest arr defs
 getAllDesc (n :: rest) arr defs
-  = do log "compile.execute" 20 $
+  = do ignore $ runCore $ log "compile.execute" 20 $
          "Ignoring " ++ show n ++ " because it's not a Resolved name"
        getAllDesc rest arr defs
 
@@ -319,7 +320,7 @@ getCompileDataWith exports doLazyAnnots phase_in tm_in
          arr <- coreLift $ newArray asize
 
          defs <- get Ctxt
-         logTime 2 "Get names" $ getAllDesc (natHackNames' ++ ns) arr defs
+         logTime 2 "Get names" $ MkCore $ getAllDesc (natHackNames' ++ ns) arr defs
 
          let entries = catMaybes !(coreLift (toList arr))
          let allNs = map (Resolved . fst) entries
diff --git a/src/Core/Core.idr b/src/Core/Core.idr
index 8658f819d..9a233b75c 100644
--- a/src/Core/Core.idr
+++ b/src/Core/Core.idr
@@ -593,7 +593,7 @@ killErrorLoc (OperatorBindingMismatch {print} fc expected actual opName rhs cand
 
 
 -- Core is a wrapper around IO that is specialised for efficiency.
-export
+public export
 record Core t where
   constructor MkCore
   runCore : IO (Either Error t)
diff --git a/src/Core/Options.idr b/src/Core/Options.idr
index 542642ba6..4829ee13d 100644
--- a/src/Core/Options.idr
+++ b/src/Core/Options.idr
@@ -226,7 +226,7 @@ defaultPPrint = MkPPOpts False False True False
 
 export
 defaultSession : Session
-defaultSession = MkSessionOpts False CoveringOnly False False Chez [] 1000 False False
+defaultSession = MkSessionOpts False CoveringOnly False False Node [] 1000 False False
                                defaultLogLevel Nothing False Nothing Nothing
                                Nothing Nothing False 1 False False True
                                False [] False False
diff --git a/src/Idris/Driver.idr b/src/Idris/Driver.idr
index 972304b3c..ec310e8bd 100644
--- a/src/Idris/Driver.idr
+++ b/src/Idris/Driver.idr
@@ -215,23 +215,7 @@ stMain cgs opts
 
                  doRepl <- catch (postOptions result opts)
                                  (\err => emitError err *> pure False)
-                 if doRepl then
-                   if ide || ideSocket then
-                     if not ideSocket
-                      then do
-                       setOutput (IDEMode 0 stdin stdout)
-                       replIDE {c} {u} {m}
-                     else do
-                       let (host, port) = ideSocketModeAddress opts
-                       f <- coreLift $ initIDESocketFile host port
-                       case f of
-                         Left err => do
-                           coreLift $ putStrLn err
-                           coreLift $ exitWith (ExitFailure 1)
-                         Right file => do
-                           setOutput (IDEMode 0 file file)
-                           replIDE {c} {u} {m}
-                   else do
+                 if doRepl then do
                        repl {c} {u} {m}
                        showTimeRecord
                   else
diff --git a/src/Idris/REPL.idr b/src/Idris/REPL.idr
index 1234cda89..8858fe7ad 100644
--- a/src/Idris/REPL.idr
+++ b/src/Idris/REPL.idr
@@ -22,8 +22,6 @@ import Core.Termination
 import Core.Unify
 import Core.Value
 
-import Core.SchemeEval
-
 import Parser.Unlit
 
 import Idris.CommandLine
@@ -890,13 +888,6 @@ process (Eval itm)
          let emode = evalMode opts
          case emode of
             Execute => do ignore (execExp itm); pure (Executed itm)
-            Scheme =>
-              do (tm `WithType` ty) <- inferAndElab InExpr itm []
-                 qtm <- logTimeWhen !getEvalTiming 0 "Evaluation" $
-                           (do nf <- snfAll [] tm
-                               quote [] nf)
-                 itm <- logTimeWhen False 0 "Resugar" $ resugar [] qtm
-                 pure (Evaluated itm Nothing)
             _ =>
               do (ntm `WithType` ty) <- logTimeWhen !getEvalTiming 0 "Evaluation" $
                                            inferAndNormalize emode itm
diff --git a/src/Libraries/Data/IOArray.idr b/src/Libraries/Data/IOArray.idr
index e85d7797a..2d06da3c8 100644
--- a/src/Libraries/Data/IOArray.idr
+++ b/src/Libraries/Data/IOArray.idr
@@ -33,6 +33,11 @@ readArray arr pos
          then pure Nothing
          else primIO (prim__arrayGet (content arr) pos)
 
+-- I'll need this for chez to run CI
+%foreign "javascript:lambda:(ty,a,b,n) => { for (let i = 0; i <= n; i++) b[i] = a[i] }"
+         "scheme:blodwen-ioarray-copyfrom"
+prim__copyFrom : ArrayData a -> ArrayData a -> Int -> PrimIO ()
+
 -- Make a new array of the given size with the elements copied from the
 -- other array
 export
@@ -48,11 +53,12 @@ newArrayCopy newsize arr
                ArrayData (Maybe a) ->
                Int -> io ()
     copyFrom old new pos
-        = if pos < 0
-             then pure ()
-             else do el <- primIO $ prim__arrayGet old pos
-                     primIO $ prim__arraySet new pos el
-                     copyFrom old new $ assert_smaller pos (pos - 1)
+      = liftIO $ fromPrim $ prim__copyFrom old new pos
+        -- = if pos < 0
+        --      then pure ()
+        --      else do el <- primIO $ prim__arrayGet old pos
+        --              primIO $ prim__arraySet new pos el
+        --              copyFrom old new $ assert_smaller pos (pos - 1)
 
 export
 toList : HasIO io => IOArray a -> io (List (Maybe a))
diff --git a/support/chez/support.ss b/support/chez/support.ss
index ffb37d4ee..32f2ec1ad 100644
--- a/support/chez/support.ss
+++ b/support/chez/support.ss
@@ -562,6 +562,13 @@
 (define (blodwen-hasenv var)
   (if (eq? (getenv var) #f) 0 1))
 
+;; IOArray
+(define (blodwen-ioarray-copyfrom ty src dst end)
+  (let loop [(i 0)]
+    (when (<= i end)
+      (vector-set! dst i (vector-ref src i))
+      (loop (+ i 1)))))
+
 ;; Randoms
 (define random-seed-register 0)
 (define (initialize-random-seed-once)
diff --git a/support/js/support_system_directory.js b/support/js/support_system_directory.js
index 225eab5a1..5ac5c7a59 100644
--- a/support/js/support_system_directory.js
+++ b/support/js/support_system_directory.js
@@ -32,6 +32,8 @@ function support_system_directory_removeDir(d){
 
 function support_system_directory_openDir(d) {
   try{
+    // bun #17581 workaround
+    support_system_directory_fs.statSync(d)
     return support_system_directory_fs.opendirSync(d)
   }catch(e){
     process.__lasterr = e
@@ -52,6 +54,8 @@ function support_system_directory_dirEntry(d) {
   try{
     const dir = d.readSync()
     if (dir == null) {
+      // to distinguish between an error and end of stream
+      process.__lasterr = undefined
       return null
     } else {
       return dir.name
